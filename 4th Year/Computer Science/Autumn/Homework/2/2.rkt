#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 30 #"(lib \"image-core.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1           0 1282 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 175
(
 #"#reader(lib \"htdp-beginner-abbr-reader.ss\" \"lang\")((modname |2|)"
 #" (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constr"
 #"uctor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 17 3 14 #";; Kris Harper"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; CMSC 15100"
0 0 60 29 1 #"\n"
0 0 17 3 11 #";; 10.12.10"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Homework 2"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 60 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Exercise 1"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 30 #";; distance : posn posn -> num"
0 0 60 29 1 #"\n"
0 0 17 3 41 #";; returns the distance between p1 and p2"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; (define (distance p1 p2)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"distance"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"posn?"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"posn?"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 3 #")))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 60 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"distance"
0 0 60 3 1 #" "
0 0 19 3 15 #"\"posn expected\""
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 60 29 1 #"\n"
0 0 60 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 60 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 60 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 8 #")))))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"distance"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 1 #"4"
0 0 60 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"distance"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 60 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 2 #"-2"
0 0 60 3 1 #" "
0 0 20 3 2 #"-2"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Exercise 2"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 60 3 1 #" "
0 0 14 3 6 #"Circle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"center"
0 0 60 3 1 #" "
0 0 14 3 6 #"radius"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 17 3 102
(
 #";; a Circle is a structure: (make-Circle center radius) where center"
 #" is a posn and radius is a number."
) 0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 60 3 1 #" "
0 0 14 3 9 #"Rectangle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"ul"
0 0 60 3 1 #" "
0 0 14 3 1 #"w"
0 0 60 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 17 3 98
(
 #";; a Rectangle is a structure: (make-Rectangle ul w h) where ul is a"
 #" posn and w and h are numbers."
) 0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 20 #";; a shape is either"
0 0 60 29 1 #"\n"
0 0 17 3 14 #";;  - a Circle"
0 0 60 29 1 #"\n"
0 0 17 3 17 #";;  - a Rectangle"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 35 #";; render : shape mode color -> img"
0 0 60 29 1 #"\n"
0 0 17 3 74
(
 #";; takes a shape, drawing mode and color and makes an image of that "
 #"shape."
) 0 0 60 29 1 #"\n"
0 0 17 3 27 #";; (define (render a-shape)"
0 0 60 29 1 #"\n"
0 0 17 3 10 #";;   (cond"
0 0 60 29 1 #"\n"
0 0 17 3 29 #";;     [(Circle? a-shape)...]"
0 0 60 29 1 #"\n"
0 0 17 3 34 #";;     [(Rectangle? a-shape)...]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"render"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 60 3 1 #" "
0 0 14 3 4 #"mode"
0 0 60 3 1 #" "
0 0 14 3 5 #"color"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Circle?"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"Rectangle?"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 3 #")))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 60 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"render"
0 0 60 3 1 #" "
0 0 19 3 16 #"\"shape expected\""
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 7 #"Circle?"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"circle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Circle-radius"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 4 #"mode"
0 0 60 3 1 #" "
0 0 14 3 5 #"color"
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 10 #"Rectangle?"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"rectangle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Rectangle-w"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Rectangle-h"
0 0 60 3 1 #" "
0 0 14 3 7 #"a-shape"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 4 #"mode"
0 0 60 3 1 #" "
0 0 14 3 5 #"color"
0 0 22 3 6 #")])]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"image?"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"render"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-Circle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 60 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 60 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"image-width"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"render"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-Circle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 60 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 60 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"image-width"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"render"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"make-Rectangle"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.1"
0 0 60 3 1 #" "
0 0 20 3 3 #"2.2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 2 #"10"
0 0 60 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 60 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Exercise 3"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 60 3 1 #" "
0 0 14 3 6 #"person"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 60 3 1 #" "
0 0 14 3 4 #"mass"
0 0 60 3 1 #" "
0 0 14 3 6 #"height"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 17 11 105
(
 #";; a person is a structure: (make-person name mass height) where nam"
 #"e is a string and mass and heigh are "
) 0 0 17 3 8 #"numbers."
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 22 #";; bmi : person -> num"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; computes the bmi of a person"
0 0 60 29 1 #"\n"
0 0 17 3 25 #";; (define (bmi a-person)"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; ...(person-mass a-person)..."
0 0 60 29 1 #"\n"
0 0 17 3 33 #";; ...(person-height a-person)..."
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"bmi"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"person?"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 60 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bmi"
0 0 60 3 1 #" "
0 0 19 3 17 #"\"person expected\""
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 60 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bmi"
0 0 60 3 1 #" "
0 0 19 3 25 #"\"nonzero height required\""
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"person-mass"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 14 3 8 #"a-person"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"bmi"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 60 3 1 #" "
0 0 20 3 2 #"80"
0 0 60 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 4 #"12.8"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"bmi"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 60 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Exercise 4"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 29 #";; a list of people is either"
0 0 60 29 1 #"\n"
0 0 17 3 11 #";;  - empty"
0 0 60 29 1 #"\n"
0 0 17 3 34 #";;  - (cons person list-of-people)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 34 #";; tallest : list-of-people -> num"
0 0 60 29 1 #"\n"
0 0 17 3 72
(
 #";; takes a list-of-people lop and returns the person with the max he"
 #"ight"
) 0 0 60 29 1 #"\n"
0 0 17 3 28 #";; (define (tallest lop)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tallest"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tallest"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 4 #"))))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 2 #")]"
0 0 60 29 1 #"\n"
0 0 60 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 2 #"<="
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"person-height"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tallest"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 4 #"))))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tallest"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 3 #"lop"
0 0 22 3 7 #"))])]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tallest"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 6 #"\"John\""
0 0 60 3 1 #" "
0 0 20 3 2 #"80"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.7"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 6 #"\"Jane\""
0 0 60 3 1 #" "
0 0 20 3 2 #"80"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.8"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 11 1 #" "
0 0 19 3 6 #"\"Jack\""
0 0 60 3 1 #" "
0 0 20 3 2 #"80"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 60 3 1 #" "
0 0 19 3 6 #"\"Jake\""
0 0 60 3 1 #" "
0 0 20 3 2 #"80"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-person"
0 0 17 3 1 #" "
0 0 19 3 6 #"\"Jane\""
0 0 17 3 1 #" "
0 0 20 3 2 #"80"
0 0 17 3 1 #" "
0 6          10 17 4 #"9/5\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Exercise 5"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 30 #";; a list of numbers is either"
0 0 60 29 1 #"\n"
0 0 17 3 11 #";;  - empty"
0 0 60 29 1 #"\n"
0 0 17 3 32 #";;  - (cons num list-of-numbers)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 42 #";; some lists of numbers for check-expects"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 14 3 5 #"list1"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"6"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"4"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"7"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 14 3 5 #"list2"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"8.1"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"5.5"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"4.2"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"1.8"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"3.9"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #"0.1"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 7 #")))))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 39 #";; len-aux : list-of-numbers num -> num"
0 0 60 29 1 #"\n"
0 0 17 3 110
(
 #";; an auxiliary function for len which takes a list of numbers l and"
 #" a number length and gives the length of l"
) 0 0 60 29 1 #"\n"
0 0 17 3 29 #";; (define (len l length)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"len-aux"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 60 3 1 #" "
0 0 14 3 6 #"length"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 6 #"length"
0 0 22 3 1 #"]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"len-aux"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 60 3 1 #" "
0 0 14 3 6 #"length"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; len : list-of-numbers -> num"
0 0 60 29 1 #"\n"
0 0 17 3 34 #";; return the length of the list l"
0 0 60 29 1 #"\n"
0 0 17 3 22 #";; (define (len l)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"len-aux"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 60 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 60 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 39 #";; sum-aux : list-of-numbers num -> num"
0 0 60 29 1 #"\n"
0 0 17 11 107
(
 #";; an auxiliary function for sum which takes a list of numbers l and"
 #" a number sum and gives the sum of the "
) 0 0 17 3 12 #"numbers in l"
0 0 60 29 1 #"\n"
0 0 17 3 30 #";; (define (sum-aux l sum)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sum-aux"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 60 3 1 #" "
0 0 14 3 3 #"sum"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 3 #"sum"
0 0 22 3 1 #"]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sum-aux"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 60 3 1 #" "
0 0 14 3 3 #"sum"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; sum : list-of-numbers -> num"
0 0 60 29 1 #"\n"
0 0 17 3 40 #";; return the sum of the list of numbers"
0 0 60 29 1 #"\n"
0 0 17 3 22 #";; (define (sum l)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"sum-aux"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 60 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 2 #"18"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 60 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 20 3 4 #"23.6"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 47 #";; sq-list : list-of-numbers -> list-of-numbers"
0 0 60 29 1 #"\n"
0 0 17 3 60
#";; return a list of the squares of the numbers in the list l"
0 0 60 29 1 #"\n"
0 0 17 3 26 #";; (define (sq-list l)...)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sq-list"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #"]"
0 0 60 29 1 #"\n"
0 0 60 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sq-list"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 60 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sq-list"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sq-list"
0 0 60 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 2 #"36"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 2 #"16"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 2 #"49"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"1"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 1 #"0"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"sq-list"
0 0 60 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #")"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 5 #"65.61"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 5 #"30.25"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 5 #"17.64"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 4 #"3.24"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 5 #"15.21"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 60 3 1 #" "
0 0 20 3 3 #".01"
0 0 60 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 7 #")))))))"
0           0
